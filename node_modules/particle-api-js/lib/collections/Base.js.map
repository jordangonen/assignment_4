{"version":3,"sources":["../../src/collections/Base.js"],"names":["Base","filter"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAEA;;;IAGqBA,I;;;;;;;;AACpB;;;;0BAIiB;AAAA,OAAXC,MAAW,yDAAJ,EAAI;;AAChB,SAAM,mCAAN;AACA;;AAED;;;;;;;;AAOA;;;6BAGW;AACV,SAAM,mCAAN;AACA;;AAED;;;;;;;;AAOA;;;6BAGW;AACV,SAAM,mCAAN;AACA;;AAED;;;;;;sBAzBkB;AACjB,SAAM,mCAAN;AACA;;;sBAYiB;AACjB,SAAM,mCAAN;AACA;;;sBAYU;AACV,SAAM,mCAAN;AACA;;;;;kBA1CmBD,I","file":"Base.js","sourcesContent":["import NotImplementedError from '../errors/NotImplementedError';\n\n/**\n * @interface\n */\nexport default class Base {\n\t/**\n\t * @param {Object} [filter] Predicate used when fetching\n\t * @return {Promise}\n\t */\n\tfetch(filter={}) {\n\t\tthrow new NotImplementedError();\n\t}\n\n\t/**\n\t * @property {boolean} hasNextPage Indicates if collection has a next page\n\t */\n\tget hasNextPage() {\n\t\tthrow new NotImplementedError();\n\t}\n\n\t/**\n\t * @return {Promise}\n\t */\n\tnextPage() {\n\t\tthrow new NotImplementedError();\n\t}\n\n\t/**\n\t * @property {boolean} hasPrevPage Indicates if collection has a previous page\n\t */\n\tget hasPrevPage() {\n\t\tthrow new NotImplementedError();\n\t}\n\n\t/**\n\t * @return {Promise}\n\t */\n\tprevPage() {\n\t\tthrow new NotImplementedError();\n\t}\n\n\t/**\n\t * @property {number} page Indicates current page number\n\t */\n\tget page() {\n\t\tthrow new NotImplementedError();\n\t}\n}\n"]}